{"file":"true-text-button.entry.js","mappings":";;;AAAA,MAAM,aAAa,GAAG,sqDAAsqD;;MCe/qD,UAAU;;;oBAIiB,KAAK;gBAIG,SAAS;gBAIrB,GAAG;kBAIN,QAAQ;;;qBAYA,IAAI;;EAIzC,gBAAgB;;IAEZ,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;GACzC;EAED,UAAU;IACN,MAAM,QAAQ,IACV,sBACI,KAAK,EAAC,SAAS,EACf,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,IAAI,EAAE,IAAI,CAAC,IAAI,IACf,eAAa,CACA,CACpB,CAAC;IAEF,IAAI,IAAI,CAAC,QAAQ,EAAE;MACf,QACI,SAAG,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,GAAG,OAAO,GAAG,EAAE,IACrD,QAAQ,CACT,EACN;KACL;SAAM;MACH,OAAO,QAAQ,CAAC;KACnB;GACJ;EAED,MAAM;IACF,QACI,EAAC,IAAI,qBACc,IAAI,CAAC,QAAQ,GAAG,MAAM,GAAG,IAAI,EAC5C,KAAK,EAAE;QACH,iBAAiB,EAAE,IAAI;OAC1B,IACD,cACI,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,OAAO,EAAE,CAAC,IAAI,iBAAiB,CAAC,CAAC,CAAC,EAClC,IAAI,EAAC,QAAQ,EACb,QAAQ,EAAE,IAAI,CAAC,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,IACjC,YAAM,IAAI,EAAC,OAAO,GAAQ,EAEzB,IAAI,CAAC,UAAU,EAAE,EAElB,YAAM,IAAI,EAAC,KAAK,GAAQ,CACnB,CACN,EACT;GACL;;;;;;;","names":[],"sources":["src/components/buttons/text-button/text-button.scss?tag=true-text-button&encapsulation=shadow","src/components/buttons/text-button/text-button.tsx"],"sourcesContent":["@import '../../../styles/mixin/button';\n\n:host {\n    display: inline-flex;\n\n    --padding: 2px 4px;\n    --min-width: max-content;\n\n    --align-items: baseline;\n\n    --slot-end-gap: 0;\n    --slot-start-gap: 0;\n\n    // Primary action style: Default\n    --color: var(--color-brand-primary-blue);\n    --color-disabled: var(--color-tertiary);\n\n    button {\n        @include button();\n\n        width: 100%;\n        min-width: var(--min-width);\n\n        color: var(--color);\n        padding: var(--padding);\n        border-radius: 2px;\n\n        display: inline-flex;\n        align-items: var(--align-items);\n\n        true-text-base {\n            color: var(--color);\n        }\n\n        .content {\n            border-bottom: 1px solid transparent;\n            overflow: hidden;\n            white-space: nowrap;\n            text-overflow: ellipsis;\n\n            margin-right: var(--slot-end-gap);\n            margin-left: var(--slot-start-gap);\n        }\n    }\n}\n\n:host(.activated:not([disabled])) {\n    button {\n        &:active,\n        &:focus,\n        &:hover {\n            .content {\n                border-color: currentColor;\n            }\n        }\n    }\n}\n\n@media (any-hover: hover) {\n    :host(:hover:not([disabled])) {\n        button {\n            &:active,\n            &:focus,\n            &:hover {\n                .content {\n                    border-color: currentColor;\n                }\n            }\n        }\n    }\n}\n\n// Secondary Action Style\n:host([type=\"secondary\"]) {\n    --color: var(--color-secondary);\n    --color-disabled: var(--color-tertiary);\n}\n\n// Tertiary Action Style\n:host([type=\"tertiary\"]) {\n    --color: var(--color-tertiary);\n    --color-disabled: var(--color-tertiary);\n}\n\n// Brand Action Style\n:host([type=\"brand\"]) {\n    --color: var(--color-custom-brand-accent);\n    --color-disabled: var(--color-custom-brand-accent);\n}\n\n:host([disabled]) {\n    --color: var(--color-disabled);\n}\n\na {\n    // removes all default <a> tag styling since we are styling the parent button\n    all: unset;\n    max-width: 100%;\n}\n","import { Component, Element, h, Host, Prop } from '@stencil/core';\nimport { ActionType } from '../../../interface';\nimport { TextWeight } from '../../typography/text-base/text-base.interface';\nimport { removeButtonFocus } from '../button-common';\nimport { TextButtonSizes } from './text-button.interface';\n/**\n * @virtualProp {\"light\" | \"dark\"} theme - The theme determines which platform styles to use.\n *\n * @slot - Content is placed in the default slot.\n */\n@Component({\n    tag: 'true-text-button',\n    styleUrl: 'text-button.scss',\n    shadow: true\n})\nexport class TextButton {\n    /**\n     * `true` if the button is disabled and cannot be interacted with.\n     */\n    @Prop({ reflect: true }) disabled = false;\n    /**\n     * The color display of the button.\n     */\n    @Prop({ reflect: true }) type: ActionType = 'primary';\n    /**\n     * The size of the text button, defaults small.\n     */\n    @Prop() size: TextButtonSizes = 's';\n    /**\n     * The weight of the text in the button.\n     */\n    @Prop() weight: TextWeight = 'medium';\n    /**\n     * A link href. If provided the button will render as a link using an a tag\n     */\n    @Prop() location: string;\n    /**\n     * If a location is provided, add this attribute to have the link open in a new tab\n     */\n    @Prop({ reflect: true }) newTab: boolean;\n    /**\n     * If true allow element to be focusable\n     */\n    @Prop({ mutable: true }) focusable = true;\n\n    @Element() host!: Element;\n\n    componentDidLoad() {\n        // Removes issue where router link adds tab index and steals focus from the button\n        this.host.removeAttribute('tabindex');\n    }\n\n    renderText() {\n        const textBase = (\n            <true-text-base\n                class='content'\n                weight={this.weight}\n                size={this.size}>\n                <slot></slot>\n            </true-text-base>\n        );\n\n        if (this.location) {\n            return (\n                <a href={this.location} target={this.newTab ? 'blank' : ''}>\n                    {textBase}\n                </a>\n            );\n        } else {\n            return textBase;\n        }\n    }\n\n    render() {\n        return (\n            <Host\n                aria-disabled={this.disabled ? 'true' : null}\n                class={{\n                    'ion-activatable': true\n                }}>\n                <button\n                    disabled={this.disabled}\n                    onClick={e => removeButtonFocus(e)}\n                    type='button'\n                    tabindex={this.focusable ? 0 : -1}>\n                    <slot name='start'></slot>\n\n                    {this.renderText()}\n\n                    <slot name='end'></slot>\n                </button>\n            </Host>\n        );\n    }\n}\n"],"version":3}