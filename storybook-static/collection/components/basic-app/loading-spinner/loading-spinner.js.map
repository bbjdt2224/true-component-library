{"version":3,"file":"loading-spinner.js","sourceRoot":"","sources":["../../../../src/components/basic-app/loading-spinner/loading-spinner.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AASzD,MAAM,OAAO,cAAc;;IAEvB,gEAAgE;IACvD,YAAO,GAA2C;MACvD,CAAC,EAAE,EAAE;MACL,CAAC,EAAE,EAAE;MACL,CAAC,EAAE,EAAE;MACL,EAAE,EAAE,EAAE;KACT,CAAA;IAEQ,kBAAa,GAA2C;MAC7D,CAAC,EAAE,CAAC;MACJ,CAAC,EAAE,CAAC;MACJ,CAAC,EAAE,CAAC;MACJ,EAAE,EAAE,CAAC;KACR,CAAA;gBAEoD,GAAG;uBAKtB,qBAAqB;qBAKlB,UAAU;;EAE/C,0BAA0B;EAC1B,IAAI,MAAM;IACN,OAAO,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;EAC1D,CAAC;EAED,oCAAoC;EACpC,IAAI,aAAa;IACb,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;EACvC,CAAC;EAED,IAAI,UAAU;IACV,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EACnC,CAAC;EAED,IAAI,WAAW;IACX,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EACzC,CAAC;EAED,MAAM;IACF,iBAAiB;IACjB,MAAM,KAAK,GAAG;MACV,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,IAAI;MACxB,KAAK,EAAE,GAAG,IAAI,CAAC,IAAI,IAAI;MACvB,0BAA0B,EAAE,GAAG,CAAC,IAAI,CAAC,aAAa,GAAC,CAAC,CAAC,EAAE;MACvD,0BAA0B,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,aAAa,GAAC,CAAC,CAAC,EAAE;KAC3D,CAAA;IAED,IAAI,IAAI,CAAC,WAAW,EAAE;MAClB,KAAK,CAAC,gBAAgB,CAAC,GAAG,eAAe,IAAI,CAAC,WAAW,GAAG,CAAC;KAChE;IAED,IAAI,IAAI,CAAC,SAAS,EAAE;MAChB,KAAK,CAAC,cAAc,CAAC,GAAG,kBAAkB,IAAI,CAAC,SAAS,GAAG,CAAC;KAC/D;IACD,OAAO,CACH,EAAC,IAAI,IAAC,KAAK,EAAE,KAAK;MACd,WACI,KAAK,EAAE,IAAI,CAAC,UAAU,EACtB,MAAM,EAAE,IAAI,CAAC,UAAU,EACvB,OAAO,EAAE,OAAO,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,EAAE;QACpD,cACI,KAAK,EAAC,YAAY,EAClB,EAAE,EAAE,IAAI,CAAC,UAAU,GAAG,CAAC,EACvB,EAAE,EAAE,IAAI,CAAC,UAAU,GAAG,CAAC,EACvB,CAAC,EAAE,IAAI,CAAC,MAAM,EACd,IAAI,EAAC,MAAM,kBACG,IAAI,CAAC,WAAW,GAAW;QAC7C,cACI,KAAK,EAAC,QAAQ,EACd,EAAE,EAAE,IAAI,CAAC,UAAU,GAAG,CAAC,EACvB,EAAE,EAAE,IAAI,CAAC,UAAU,GAAG,CAAC,EACvB,CAAC,EAAE,IAAI,CAAC,MAAM,EACd,IAAI,EAAC,MAAM,kBACG,IAAI,CAAC,WAAW,sBACZ,IAAI,CAAC,aAAa,oBACrB,OAAO,GAAU,CAClC,CACH,CACV,CAAA;EACL,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACJ","sourcesContent":["import { Component, h, Host, Prop } from '@stencil/core';\nimport { BackgroundColor, LabelColor } from '../../../interface';\nimport { LoadingSpinnerSizes } from './loading-spinner.interface';\n\n@Component({\n    tag: 'true-loading-spinner',\n    styleUrl: 'loading-spinner.scss',\n    shadow: true\n})\nexport class LoadingSpinner {\n\n    // Sizes are not yet defined. Matching current for the component\n    readonly sizeMap: {[key in LoadingSpinnerSizes]: number} = {\n        s: 14,\n        m: 16,\n        l: 18,\n        xl: 50\n    }\n\n    readonly strokeSizeMap: {[key in LoadingSpinnerSizes]: number} = {\n        s: 2,\n        m: 2,\n        l: 2,\n        xl: 4\n    }\n\n    @Prop({ reflect: true }) size: LoadingSpinnerSizes = 'm';\n\n    /**\n     * Color of the loader line\n     */\n    @Prop() loaderColor: LabelColor = 'custom-brand-accent';\n\n    /**\n     * Color of the track the loader follows\n     */\n    @Prop() pathColor: BackgroundColor = 'tertiary';\n\n    // calculate radius of svg\n    get radius() {\n        return (this.sizeNumber / 2) - (this.strokeWidth / 2);\n    }\n\n    // calculate circumference of circle\n    get circumference() {\n        return (2 * Math.PI * this.radius);\n    }\n\n    get sizeNumber() {\n        return this.sizeMap[this.size];\n    }\n\n    get strokeWidth() {\n        return this.strokeSizeMap[this.size];\n    }\n\n    render() {\n        // set host style\n        const style = {\n            height: `${this.size}px`,\n            width: `${this.size}px`,\n            '--positive-circumference': `${(this.circumference-1)}`,\n            '--negative-circumference': `${(-this.circumference+1)}`\n        }\n\n        if (this.loaderColor) {\n            style['--stroke-color'] = `var(--color-${this.loaderColor})`;\n        }\n\n        if (this.pathColor) {\n            style['--path-color'] = `var(--bg-color-${this.pathColor})`;\n        }\n        return (\n            <Host style={style}>\n                <svg\n                    width={this.sizeNumber}\n                    height={this.sizeNumber}\n                    viewBox={`0 0 ${this.sizeNumber} ${this.sizeNumber}`}>\n                    <circle\n                        class='background'\n                        cx={this.sizeNumber / 2}\n                        cy={this.sizeNumber / 2}\n                        r={this.radius}\n                        fill='none'\n                        stroke-width={this.strokeWidth}></circle>\n                    <circle\n                        class='loader'\n                        cx={this.sizeNumber / 2}\n                        cy={this.sizeNumber / 2}\n                        r={this.radius}\n                        fill='none'\n                        stroke-width={this.strokeWidth}\n                        stroke-dasharray={this.circumference}\n                        stroke-linecap='round'></circle>\n                </svg>\n            </Host>\n        )\n    }\n}\n"]}