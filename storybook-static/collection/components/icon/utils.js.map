{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/components/icon/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAG7C,IAAI,UAA+B,CAAC;AAEpC,MAAM,CAAC,MAAM,UAAU,GAAG,GAAwB,EAAE;EAChD,IAAI,CAAC,UAAU,EAAE;IACb,MAAM,GAAG,GAAG,MAAa,CAAC;IAC1B,GAAG,CAAC,SAAS,GAAG,GAAG,CAAC,SAAS,IAAI,EAAE,CAAC;IACpC,UAAU,GAAG,GAAG,CAAC,SAAS,CAAC,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,GAAG,IAAI,IAAI,GAAG,EAAE,CAAC;GACnE;EACD,OAAO,UAAU,CAAC;AACtB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,KAAiC,EAAE,EAAE;EAC1D,MAAM,GAAG,GAAG,UAAU,EAAE,CAAC;EACzB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;IAC9B,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;EAC/B,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,MAAM,GAAG,CAAC,CAAO,EAAE,EAAE;EAC9B,IAAI,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;EAC1B,IAAI,GAAG,EAAE;IACL,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC;GAC3B;EAED,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,CAAC,IAAY,EAAE,EAAE;EACjC,MAAM,GAAG,GAAG,UAAU,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;EACnC,IAAI,GAAG,EAAE;IACL,OAAO,GAAG,CAAC;GACd;EACD,OAAO,YAAY,CAAC,SAAS,IAAI,MAAM,CAAC,CAAC;AAC7C,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,OAAO,GAAG,CACnB,IAAwB,EAC1B,EAAE;EACA,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE;IACb,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;GAC7B;EAED,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;IACpC,OAAO,IAAI,CAAC;GACf;EAED,uCAAuC;EACvC,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;EACtD,IAAI,YAAY,KAAK,EAAE,EAAE;IACrB,OAAO,IAAI,CAAC;GACf;EAED,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,MAAM,GAAG,CAAC,GAAuB,EAAE,EAAE;EAC9C,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE;IACZ,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;IACjB,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE;MACZ,OAAO,GAAG,CAAC;KACd;GACJ;EACD,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,KAAK,GAAG,CAAC,GAAW,EAAE,EAAE;EACjC,OAAO,GAAG,CAAC,MAAM,GAAG,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACjD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,KAAK,GAAG,CAAC,GAAQ,EAAiB,EAAE,CAAC,OAAO,GAAG,KAAK,QAAQ,CAAC","sourcesContent":["import { getAssetPath } from '@stencil/core';\nimport { Icon } from './icon';\n\nlet CACHED_MAP: Map<string, string>;\n\nexport const getIconMap = (): Map<string, string> => {\n    if (!CACHED_MAP) {\n        const win = window as any;\n        win.Hiveicons = win.Hiveicons || {};\n        CACHED_MAP = win.Hiveicons.map = win.Hiveicons.map || new Map();\n    }\n    return CACHED_MAP;\n};\n\nexport const addIcons = (icons: { [name: string]: string }) => {\n    const map = getIconMap();\n    Object.keys(icons).forEach(name => {\n        map.set(name, icons[name]);\n    });\n};\n\nexport const getUrl = (i: Icon) => {\n    let url = getName(i.name);\n    if (url) {\n        return getNamedUrl(url);\n    }\n\n    return null;\n};\n\nconst getNamedUrl = (name: string) => {\n    const url = getIconMap().get(name);\n    if (url) {\n        return url;\n    }\n    return getAssetPath(`icons/${name}.svg`);\n};\n\nexport const getName = (\n    name: string | undefined\n) => {\n    if (isStr(name)) {\n        name = name.toLowerCase();\n    }\n\n    if (!isStr(name) || name.trim() === '') {\n        return null;\n    }\n\n    // only allow alpha characters and dash\n    const invalidChars = name.replace(/[a-z]|-|\\d/gi, '');\n    if (invalidChars !== '') {\n        return null;\n    }\n\n    return name;\n};\n\nexport const getSrc = (src: string | undefined) => {\n    if (isStr(src)) {\n        src = src.trim();\n        if (isSrc(src)) {\n            return src;\n        }\n    }\n    return null;\n};\n\nexport const isSrc = (str: string) => {\n    return str.length > 0 && /(\\/|\\.)/.test(str);\n};\n\nexport const isStr = (val: any): val is string => typeof val === 'string';\n"]}