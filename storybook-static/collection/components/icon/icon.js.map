{"version":3,"file":"icon.js","sourceRoot":"","sources":["../../../src/components/icon/icon.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Build, Component, Element, h, Host, Prop, State, Watch } from '@stencil/core';\nimport { LabelColor } from '../../interface';\nimport { IconSizes } from './icon.interface';\nimport { getSvgContent } from './request';\nimport { getName, getUrl } from './utils';\n\n@Component({\n    tag: 'true-icon',\n    assetsDirs: ['icons'],\n    styleUrl: 'icon.scss',\n    shadow: true\n})\nexport class Icon {\n    private io?: IntersectionObserver;\n\n    @Element() el!: HTMLElement;\n\n    @State() private svgContent?: string;\n    @State() private isVisible = false;\n\n    /**\n     * Specifies the label to use for accessibility. Defaults to the icon name.\n     */\n    @Prop({ mutable: true, reflect: true }) defaultLabel?: string;\n\n    /**\n     * Specifies which icon to use from the built-in set of icons.\n     */\n    @Prop({ reflect: true }) name?: string;\n\n    /**\n     * The size of the icon: xxs through xl\n     */\n    @Prop({ reflect: true }) size?: IconSizes;\n\n    @Prop() color: LabelColor;\n\n    /**\n     * If enabled, ion-icon will be loaded lazily when it's visible in the viewport.\n     * Default, `false`.\n     */\n    @Prop() lazy = false;\n\n    connectedCallback() {\n        // purposely do not return the promise here because loading\n        // the svg file should not hold up loading the app\n        // only load the svg if it's visible\n        this.waitUntilVisible(this.el, '50px', () => {\n            this.isVisible = true;\n            this.loadIcon();\n        });\n    }\n\n    disconnectedCallback() {\n        if (this.io) {\n            this.io.disconnect();\n            this.io = undefined;\n        }\n    }\n\n    private waitUntilVisible(el: HTMLElement, rootMargin: string, cb: () => void) {\n        if (Build.isBrowser && this.lazy && typeof window !== 'undefined' && (window as any).IntersectionObserver) {\n            const io = this.io = new (window as any).IntersectionObserver((data: IntersectionObserverEntry[]) => {\n                if (data[0].isIntersecting) {\n                    io.disconnect();\n                    this.io = undefined;\n                    cb();\n                }\n            }, { rootMargin });\n\n            io.observe(el);\n\n        } else {\n            // browser doesn't support IntersectionObserver\n            // so just fallback to always show it\n            cb();\n        }\n    }\n\n    @Watch('name')\n    loadIcon() {\n        if (Build.isBrowser && this.isVisible) {\n            const url = getUrl(this);\n            if (url) {\n                getSvgContent(url)\n                    .then(svgContent => this.svgContent = svgContent);\n            }\n        }\n\n        if (!this.defaultLabel) {\n            const label = getName(this.name);\n            // user did not provide a label\n            // come up with the label based on the icon name\n            if (label) {\n                this.defaultLabel = label\n                    .replace('ios-', '')\n                    .replace('md-', '')\n                    .replace(/\\-/g, ' ');\n            }\n        }\n    }\n\n    render() {\n        const style = {};\n        if (this.color) {\n            style['--color'] = `var(--color-${this.color})`;\n        }\n        return (\n            <Host role='img'\n            style={style}>{(\n                (Build.isBrowser && this.svgContent)\n                    ? <div class='icon-inner' innerHTML={this.svgContent}></div>\n                    : <div class='icon-inner'></div>\n            )}\n            </Host>\n        );\n    }\n}\n"]}