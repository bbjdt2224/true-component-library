{"version":3,"file":"text-button.js","sourceRoot":"","sources":["../../../../src/components/buttons/text-button/text-button.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAGlE,OAAO,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AAErD;;;;GAIG;AAMH,MAAM,OAAO,UAAU;;oBAIiB,KAAK;gBAIG,SAAS;gBAIrB,GAAG;kBAIN,QAAQ;;;qBAYA,IAAI;;EAIzC,gBAAgB;IACZ,kFAAkF;IAClF,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;EAC1C,CAAC;EAED,UAAU;IACN,MAAM,QAAQ,GAAG,CACb,sBACI,KAAK,EAAC,SAAS,EACf,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,IAAI,EAAE,IAAI,CAAC,IAAI;MACf,eAAa,CACA,CACpB,CAAC;IAEF,IAAI,IAAI,CAAC,QAAQ,EAAE;MACf,OAAO,CACH,SAAG,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,IACrD,QAAQ,CACT,CACP,CAAC;KACL;SAAM;MACH,OAAO,QAAQ,CAAC;KACnB;EACL,CAAC;EAED,MAAM;IACF,OAAO,CACH,EAAC,IAAI,qBACc,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAC5C,KAAK,EAAE;QACH,iBAAiB,EAAE,IAAI;OAC1B;MACD,cACI,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAClC,IAAI,EAAC,QAAQ,EACb,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjC,YAAM,IAAI,EAAC,OAAO,GAAQ;QAEzB,IAAI,CAAC,UAAU,EAAE;QAElB,YAAM,IAAI,EAAC,KAAK,GAAQ,CACnB,CACN,CACV,CAAC;EACN,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACJ","sourcesContent":["import { Component, Element, h, Host, Prop } from '@stencil/core';\nimport { ActionType } from '../../../interface';\nimport { TextWeight } from '../../typography/text-base/text-base.interface';\nimport { removeButtonFocus } from '../button-common';\nimport { TextButtonSizes } from './text-button.interface';\n/**\n * @virtualProp {\"light\" | \"dark\"} theme - The theme determines which platform styles to use.\n *\n * @slot - Content is placed in the default slot.\n */\n@Component({\n    tag: 'true-text-button',\n    styleUrl: 'text-button.scss',\n    shadow: true\n})\nexport class TextButton {\n    /**\n     * `true` if the button is disabled and cannot be interacted with.\n     */\n    @Prop({ reflect: true }) disabled = false;\n    /**\n     * The color display of the button.\n     */\n    @Prop({ reflect: true }) type: ActionType = 'primary';\n    /**\n     * The size of the text button, defaults small.\n     */\n    @Prop() size: TextButtonSizes = 's';\n    /**\n     * The weight of the text in the button.\n     */\n    @Prop() weight: TextWeight = 'medium';\n    /**\n     * A link href. If provided the button will render as a link using an a tag\n     */\n    @Prop() location: string;\n    /**\n     * If a location is provided, add this attribute to have the link open in a new tab\n     */\n    @Prop({ reflect: true }) newTab: boolean;\n    /**\n     * If true allow element to be focusable\n     */\n    @Prop({ mutable: true }) focusable = true;\n\n    @Element() host!: Element;\n\n    componentDidLoad() {\n        // Removes issue where router link adds tab index and steals focus from the button\n        this.host.removeAttribute('tabindex');\n    }\n\n    renderText() {\n        const textBase = (\n            <true-text-base\n                class='content'\n                weight={this.weight}\n                size={this.size}>\n                <slot></slot>\n            </true-text-base>\n        );\n\n        if (this.location) {\n            return (\n                <a href={this.location} target={this.newTab ? 'blank' : ''}>\n                    {textBase}\n                </a>\n            );\n        } else {\n            return textBase;\n        }\n    }\n\n    render() {\n        return (\n            <Host\n                aria-disabled={this.disabled ? 'true' : null}\n                class={{\n                    'ion-activatable': true\n                }}>\n                <button\n                    disabled={this.disabled}\n                    onClick={e => removeButtonFocus(e)}\n                    type='button'\n                    tabindex={this.focusable ? 0 : -1}>\n                    <slot name='start'></slot>\n\n                    {this.renderText()}\n\n                    <slot name='end'></slot>\n                </button>\n            </Host>\n        );\n    }\n}\n"]}