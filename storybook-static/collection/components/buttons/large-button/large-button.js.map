{"version":3,"file":"large-button.js","sourceRoot":"","sources":["../../../../src/components/buttons/large-button/large-button.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAEpE,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AACjD;;GAEG;AAMH,MAAM,OAAO,WAAW;;;gBAQwB,SAAS;kBAIpC,KAAK;oBAIc,KAAK;gBAI1B,KAAK;qBAIoC,QAAQ;;EAKhE,SAAS,CAAC,KAAK;IACX,IAAI,IAAI,CAAC,QAAQ,EAAE;MACf,KAAK,CAAC,cAAc,EAAE,CAAC;MACvB,OAAO;KACV;IAED,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;MACZ,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KAC5C;EACL,CAAC;EAED,MAAM;IACF,OAAO,CACH,mBACI,QAAQ,EAAC,GAAG,EACZ,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,SAAS,EAAE,IAAI,CAAC,SAAS;MAEzB,eAAa;MAEb,WAAK,KAAK,EAAC,aAAa,EAAC,IAAI,EAAC,KAAK,IAE3B,IAAI,CAAC,IAAI,CAAC,CAAC;QACP,4BAAsB,IAAI,EAAE,GAAG,GAAwB,CAAC,CAAC;QACzD,iBAAW,IAAI,EAAE,IAAI,CAAC,IAAI,GAAc,CAE9C,CAEI,CACjB,CAAC;EACN,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAEJ","sourcesContent":["import { Component, Element, h, Listen, Prop } from '@stencil/core';\nimport { ActionType } from '../../../interface';\nimport { trySubmitForm } from '../button-common';\n/**\n * @slot - Content is placed in the default slot.\n */\n@Component({\n    tag: 'true-large-button',\n    styleUrl: 'large-button.scss',\n    shadow: true\n})\nexport class LargeButton {\n    /**\n     * The icon to display on the right side of the button\n     */\n    @Prop() icon: string;\n    /**\n     * The importance of action the button is intended for (primary, secondary)\n     */\n    @Prop({ reflect: true }) type: ActionType = 'primary';\n    /**\n     * Whether or not to render the button as a submit button\n     */\n    @Prop() submit = false;\n    /**\n     * `true` if the button is disabled and cannot be interacted with.\n     */\n    @Prop({ reflect: true }) disabled = false;\n    /**\n     * `true` if the button is in a busy state.\n     */\n    @Prop() busy = false;\n    /**\n     * Whether to align the text left or center. Center is default\n     */\n    @Prop({ reflect: true }) textAlign: 'center' | 'left' = 'center';\n\n    @Element() element!: Element;\n\n    @Listen('click')\n    hostClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            return;\n        }\n\n        if (!this.busy) {\n            trySubmitForm(this.submit, this.element);\n        }\n    }\n\n    render() {\n        return (\n            <true-button\n                textSize='m'\n                submit={this.submit}\n                disabled={this.disabled}\n                type={this.type}\n                textAlign={this.textAlign}>\n\n                <slot></slot>\n\n                <div class='icon-bubble' slot='end'>\n                    {\n                        this.busy ?\n                            <true-loading-spinner size ='l'></true-loading-spinner> :\n                            <true-icon name={this.icon}></true-icon>\n                    }\n                </div>\n\n            </true-button>\n        );\n    }\n\n}\n"]}