{"version":3,"file":"button.js","sourceRoot":"","sources":["../../../../src/components/buttons/button/button.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAE1E,OAAO,EAAE,iBAAiB,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAEpE;;;;GAIG;AAMH,MAAM,OAAO,MAAM;;gBAI6B,SAAS;oBAID,GAAG;kBAItC,KAAK;oBAI6B,KAAK;qBAIA,QAAQ;;;EAShE,SAAS,CAAC,KAAK;IACX,IAAI,IAAI,CAAC,QAAQ,EAAE;MACf,KAAK,CAAC,cAAc,EAAE,CAAC;MACvB,OAAO;KACV;IAED,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;EAC7C,CAAC;EAED,MAAM;IACF,OAAO,CACH,EAAC,IAAI,IACD,KAAK,EAAE;QACH,cAAc,EAAE,IAAI,CAAC,SAAS;OACjC,mBACc,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI;MAC3C,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,WAAK,KAAK,EAAC,SAAS,GAAO,CAAC,CAAC,CAAC,IAAI;MACrD,cACI,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAClC,IAAI,EAAE,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ;QAChD,sBACI,IAAI,EAAE,IAAI,CAAC,QAAQ,EACnB,MAAM,EAAC,QAAQ;UACf,eAAa,CACA;QACjB,YAAM,IAAI,EAAC,KAAK,GAAQ,CACnB,CACN,CACV,CAAC;EACN,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACJ","sourcesContent":["import { Component, Element, h, Host, Listen, Prop } from '@stencil/core';\r\nimport { ActionType } from '../../../interface';\r\nimport { removeButtonFocus, trySubmitForm } from '../button-common';\r\nimport { ButtonTextSize } from './button.interface';\r\n/**\r\n * @virtualProp {\"light\" | \"dark\"} theme - The theme determines which platform styles to use.\r\n *\r\n * @slot - Content is placed in the default slot.\r\n */\r\n@Component({\r\n    tag: 'true-button',\r\n    styleUrl: 'button.scss',\r\n    shadow: true\r\n})\r\nexport class Button {\r\n    /**\r\n     * The intended action of the button (primary, secondary, destructive)\r\n     */\r\n    @Prop({ reflect: true }) type: ActionType = 'primary';\r\n    /**\r\n     * the size of the text to use in the button\r\n     */\r\n    @Prop({ reflect: true }) textSize: ButtonTextSize = 's';\r\n    /**\r\n     * Whether or not to render the button as a submit button\r\n     */\r\n    @Prop() submit = false;\r\n    /**\r\n     * `true` if the button is disabled and cannot be interacted with\r\n     */\r\n    @Prop({ mutable: true, reflect: true }) disabled = false;\r\n    /**\r\n     * How the button text should be aligned\r\n     */\r\n    @Prop({ reflect: true }) textAlign: 'center' | 'left' = 'center';\r\n    /**\r\n     * `true` if the overlay should be rendered over the button\r\n     */\r\n    @Prop({ reflect: true }) hasOverlay: boolean;\r\n\r\n    @Element() element!: Element;\r\n\r\n    @Listen('click')\r\n    hostClick(event) {\r\n        if (this.disabled) {\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n\r\n        trySubmitForm(this.submit, this.element);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Host\r\n                style={{\r\n                    '--text-align': this.textAlign\r\n                }}\r\n                aria-disabled={this.disabled ? 'true' : null}>\r\n                {this.hasOverlay ? <div class='overlay'></div> : null}\r\n                <button\r\n                    disabled={this.disabled}\r\n                    onClick={e => removeButtonFocus(e)}\r\n                    type={this.submit === true ? 'submit' : 'button'}>\r\n                    <true-text-base\r\n                        size={this.textSize}\r\n                        weight='medium'>\r\n                        <slot></slot>\r\n                    </true-text-base>\r\n                    <slot name='end'></slot>\r\n                </button>\r\n            </Host>\r\n        );\r\n    }\r\n}\r\n"]}