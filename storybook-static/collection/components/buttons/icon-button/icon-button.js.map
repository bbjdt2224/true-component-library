{"version":3,"file":"icon-button.js","sourceRoot":"","sources":["../../../../src/components/buttons/icon-button/icon-button.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAEzD,OAAO,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AAQrD,MAAM,OAAO,UAAU;;;gBAQuB,WAAW;oBAInB,KAAK;mBAKN,KAAK;oBAKrB,CAAC;gBAK4B,GAAG;kBAKjB,KAAK;;;;;EAevC,WAAW;IACT,IAAI,IAAI,CAAC,KAAK,EAAE;MACd,OAAO,CACL,WAAK,KAAK,EAAC,OAAO;QAChB,oBAAc,KAAK,EAAC,aAAa,IAC9B,IAAI,CAAC,KAAK,CACE,CACX,CACP,CAAC;KACH;EACH,CAAC;EAED,MAAM;IACJ,OAAO,CACL,EAAC,IAAI,qBACY,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAC5C,KAAK,EAAE;QACL,iBAAiB,EAAE,IAAI;OACxB;MAEA,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,WAAK,KAAK,EAAC,SAAS,GAAO,CAAC,CAAC,CAAC,IAAI;MACrD,cAAQ,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAC1F,WAAK,KAAK,EAAC,YAAY,GAAO;QAC9B,iBAAW,IAAI,EAAE,IAAI,CAAC,IAAI,GAAc,CACjC;MACR,IAAI,CAAC,WAAW,EAAE,CACd,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, h, Host, Prop } from '@stencil/core';\r\nimport { ActionType } from '../../../interface';\r\nimport { removeButtonFocus } from '../button-common';\r\nimport { IconButtonSize } from './icon-button.interface';\r\n\r\n@Component({\r\n  tag: 'true-icon-button',\r\n  styleUrl: 'icon-button.scss',\r\n  shadow: true,\r\n})\r\nexport class IconButton {\r\n  /**\r\n   * The icon to display inside the button\r\n   */\r\n  @Prop({ mutable: true }) icon: string;\r\n  /**\r\n   * The color display of the button.\r\n   */\r\n  @Prop({ reflect: true }) type: ActionType = 'secondary';\r\n  /**\r\n   * `true` if the button is disabled and cannot be interacted with.\r\n   */\r\n  @Prop({ reflect: true }) disabled = false;\r\n\r\n  /**\r\n   * `true` if button is in toggled state\r\n   */\r\n  @Prop({ reflect: true }) toggled = false;\r\n\r\n  /**\r\n   * The keyboard focus order\r\n   */\r\n  @Prop() tabindex = 0;\r\n\r\n  /**\r\n   * Size of the icon\r\n   */\r\n  @Prop({ reflect: true }) size: IconButtonSize = 'm';\r\n\r\n  /**\r\n   * `true` if a box shadow should be shown (only suports primary type)\r\n   */\r\n  @Prop({ reflect: true }) shadow = false;\r\n  /**\r\n   * Number shown in a badge in the corner of the button\r\n   */\r\n  @Prop({ mutable: true }) badge: number;\r\n  /**\r\n   * `true` if the overlay should be rendered.\r\n   */\r\n  @Prop({ reflect: true }) hasOverlay: boolean;\r\n\r\n  /**\r\n   * Flips the icon horizontally (h) of vertically (v) in css\r\n   */\r\n  @Prop({ reflect: true }) flip: 'h' | 'v';\r\n\r\n  renderBadge() {\r\n    if (this.badge) {\r\n      return (\r\n        <div class=\"badge\">\r\n          <true-subtext color=\"neutral-100\">\r\n            {this.badge}\r\n          </true-subtext>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host\r\n        aria-disabled={this.disabled ? 'true' : null}\r\n        class={{\r\n          'ion-activatable': true,\r\n        }}\r\n      >\r\n        {this.hasOverlay ? <div class=\"overlay\"></div> : null}\r\n        <button tabindex={this.tabindex} disabled={this.disabled} onClick={e => removeButtonFocus(e)}>\r\n          <div class=\"background\"></div>\r\n          <true-icon name={this.icon}></true-icon>\r\n        </button>\r\n        {this.renderBadge()}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}