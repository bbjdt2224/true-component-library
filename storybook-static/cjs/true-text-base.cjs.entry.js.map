{"file":"true-text-base.entry.cjs.js","mappings":";;;;;;AAAA,MAAM,WAAW,GAAG,gwDAAgwD;;MCSvwD,QAAQ;;;gBAKyB,GAAG;;;;;;EAqB7C,gBAAgB;;IAEZ,qBAAqB,CAAC;MAClB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;KACtB,CAAC,CAAA;GACL;EAED,MAAM;IACF,MAAM,KAAK,GAAG,EAAE,CAAA;IAEhB,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;MACvB,KAAK,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAA;KACvC;IAED,IAAI,IAAI,CAAC,KAAK,EAAE;MACZ,KAAK,CAAC,cAAc,CAAC,GAAG,eAAe,IAAI,CAAC,KAAK,GAAG,CAAA;KACvD;IAED,QACIA,QAACC,UAAI,IAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,GAAG,QAAQ,GAAG,EAAE,IAClDD,sBAAMA,qBAAa,CAAO,CACvB,EACV;GACJ;;;;;;","names":["h","Host"],"sources":["src/components/typography/text-base/text-base.scss?tag=true-text-base&encapsulation=shadow","src/components/typography/text-base/text-base.tsx"],"sourcesContent":[":host {\r\n    display: block;\r\n    --max-lines: initial;\r\n    --line-height: initial;\r\n    --font-weight: 400;\r\n    --font-size: var(--m-font-size);\r\n    --font-family: var(--app-font-family);\r\n    --letter-spacing: initial;\r\n    --text-color: var(--color-primary);\r\n    --text-transform: none;\r\n\r\n    align-items: center;\r\n\r\n    color: var(--text-color, currentColor);\r\n\r\n    font-variant-numeric: var(--font-variant-numeric);\r\n\r\n    span {\r\n        font-size: var(--font-size);\r\n        font-weight: var(--font-weight);\r\n        font-family: var(--app-font-family);\r\n        letter-spacing: var(--letter-spacing);\r\n        line-height: var(--line-height);\r\n        text-transform: var(--text-transform);\r\n        align-items: center;\r\n        display: block;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n\r\n        -webkit-font-smoothing: antialiased;\r\n    }\r\n}\r\n\r\n// Transition color on load to prevent color flashing\r\n:host(.loaded) {\r\n    transition: color 0.2s ease-in-out;\r\n}\r\n\r\n// Text Sizes\r\n$sizes: (\r\n    xxxl: 40px,\r\n    xxl: 32px,\r\n    xl: 24px,\r\n    l: 20px,\r\n    m: 16px,\r\n    s: 14px,\r\n    xs: 12px,\r\n    xxs: 10px\r\n);\r\n\r\n@each $name, $size in $sizes {\r\n    $varName: --#{$name}-font-size;\r\n\r\n    :host {\r\n        #{$varName}: #{$size};\r\n    }\r\n\r\n    :host([size='#{$name}']) {\r\n        --font-size: var(#{$varName}) !important;\r\n    }\r\n}\r\n\r\n// Text Weights\r\n$weights: (\r\n    extra-bold: 800,\r\n    bold: 700,\r\n    medium: 500,\r\n    regular: 400\r\n);\r\n\r\n@each $name, $weight in $weights {\r\n    :host([weight='#{$name}']) {\r\n        --font-weight: #{$weight} !important;\r\n    }\r\n}\r\n\r\n// Max Lines Truncation\r\n// Webkit only\r\n:host([max-lines]) {\r\n    span {\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n        word-break: break-word;\r\n        visibility: visible;\r\n\r\n        display: -webkit-box;\r\n        -webkit-box-orient: vertical;\r\n        -webkit-line-clamp: var(--max-lines);\r\n    }\r\n}","import { Component, h, Host, Prop, State } from \"@stencil/core\";\r\nimport { TextColor, TextSize, TextWeight } from \"./text-base.interface\";\r\n\r\n\r\n@Component({\r\n    tag: 'true-text-base',\r\n    styleUrl: 'text-base.scss',\r\n    shadow: true\r\n})\r\nexport class TextBase {\r\n\r\n    /**\r\n     * Size of the text\r\n     */\r\n    @Prop({ reflect: true }) size: TextSize = 'm'\r\n\r\n    /**\r\n     * Primary color of the text\r\n     * Uses predefined css variables\r\n     */\r\n    @Prop({ reflect: true }) color: TextColor;\r\n\r\n    /**\r\n     * Weight of the text\r\n     */\r\n    @Prop({ reflect: true }) weight: TextWeight;\r\n\r\n    /**\r\n     * Maximum lines to display before truncating the text\r\n     * If no value is given all lines will show\r\n     */\r\n    @Prop({ reflect: true }) maxLines: string;\r\n\r\n    @State() loaded: boolean;\r\n\r\n    componentDidLoad() {\r\n        // Set loaded to true so colors are correct\r\n        requestAnimationFrame(() => {\r\n            this.loaded = true;\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const style = {}\r\n\r\n        if (this.maxLines != null) {\r\n            style['--max-lines'] = this.maxLines\r\n        }\r\n\r\n        if (this.color) {\r\n            style['--text-color'] = `var(--color-${this.color})`\r\n        }\r\n\r\n        return (\r\n            <Host style={style} class={this.loaded ? 'loaded' : ''}>\r\n                <span><slot></slot></span>\r\n            </Host>\r\n        )\r\n    }\r\n\r\n}"],"version":3}