{"file":"true-icon.true-subtext.entry.cjs.js","mappings":"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","names":["getAssetPath","h","Host"],"sources":["src/components/icon/utils.ts","src/components/icon/validate.ts","src/components/icon/request.ts","src/components/icon/icon.scss?tag=true-icon&encapsulation=shadow","src/components/icon/icon.tsx","src/components/typography/subtext/subtext.scss?tag=true-subtext&encapsulation=shadow","src/components/typography/subtext/subtext.tsx"],"sourcesContent":["import { getAssetPath } from '@stencil/core';\nimport { Icon } from './icon';\n\nlet CACHED_MAP: Map<string, string>;\n\nexport const getIconMap = (): Map<string, string> => {\n    if (!CACHED_MAP) {\n        const win = window as any;\n        win.Hiveicons = win.Hiveicons || {};\n        CACHED_MAP = win.Hiveicons.map = win.Hiveicons.map || new Map();\n    }\n    return CACHED_MAP;\n};\n\nexport const addIcons = (icons: { [name: string]: string }) => {\n    const map = getIconMap();\n    Object.keys(icons).forEach(name => {\n        map.set(name, icons[name]);\n    });\n};\n\nexport const getUrl = (i: Icon) => {\n    let url = getName(i.name);\n    if (url) {\n        return getNamedUrl(url);\n    }\n\n    return null;\n};\n\nconst getNamedUrl = (name: string) => {\n    const url = getIconMap().get(name);\n    if (url) {\n        return url;\n    }\n    return getAssetPath(`icons/${name}.svg`);\n};\n\nexport const getName = (\n    name: string | undefined\n) => {\n    if (isStr(name)) {\n        name = name.toLowerCase();\n    }\n\n    if (!isStr(name) || name.trim() === '') {\n        return null;\n    }\n\n    // only allow alpha characters and dash\n    const invalidChars = name.replace(/[a-z]|-|\\d/gi, '');\n    if (invalidChars !== '') {\n        return null;\n    }\n\n    return name;\n};\n\nexport const getSrc = (src: string | undefined) => {\n    if (isStr(src)) {\n        src = src.trim();\n        if (isSrc(src)) {\n            return src;\n        }\n    }\n    return null;\n};\n\nexport const isSrc = (str: string) => {\n    return str.length > 0 && /(\\/|\\.)/.test(str);\n};\n\nexport const isStr = (val: any): val is string => typeof val === 'string';\n","import { isStr } from './utils';\n\nexport const validateContent = (\n    svgContent: string | null\n) => {\n    if (svgContent) {\n        const div = document.createElement('div');\n        div.innerHTML = svgContent;\n\n        // setup this way to ensure it works on our buddy IE\n        for (let i = div.childNodes.length - 1; i >= 0; i--) {\n            if (div.childNodes[i].nodeName.toLowerCase() !== 'svg') {\n                div.removeChild(div.childNodes[i]);\n            }\n        }\n\n        // must only have 1 root element\n        const svgElm = div.firstElementChild;\n        if (svgElm && svgElm.nodeName.toLowerCase() === 'svg') {\n            svgElm.setAttribute('class', 's-ion-icon');\n\n            // root element must be an svg\n            // lets double check we've got valid elements\n            // do not allow scripts\n            if (isValid(svgElm as any)) {\n                return div.innerHTML;\n            }\n        }\n    }\n    return '';\n};\n\n\nexport const isValid = (elm: HTMLElement) => {\n    if (elm.nodeType === 1) {\n        if (elm.nodeName.toLowerCase() === 'script') {\n            return false;\n        }\n\n        for (let i = 0; i < elm.attributes.length; i++) {\n            const val = elm.attributes[i].value;\n            if (isStr(val) && val.toLowerCase().indexOf('on') === 0) {\n                return false;\n            }\n        }\n\n        for (let i = 0; i < elm.childNodes.length; i++) {\n            if (!isValid(elm.childNodes[i] as any)) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n","import { validateContent } from './validate';\n\nconst requests = new Map<string, Promise<string>>();\n\nexport const getSvgContent = (url: string) => {\n    // see if we already have a request for this url\n    let req = requests.get(url);\n\n    if (!req) {\n        // we don't already have a request\n        req = fetch(url).then(rsp => {\n            if (rsp.status <= 299) {\n                return rsp.text();\n            }\n            return Promise.resolve(null);\n\n        }).then(svgContent => validateContent(svgContent));\n\n        // cache for the same requests\n        requests.set(url, req);\n    }\n\n    return req;\n};\n","@import './icon-mixins'; // Size variables\n\n:host {\n    --color: currentColor;\n    display: inline-block;\n\n    /* Sized by font-size */\n    width: 1em;\n    min-width: 1em;\n\n    height: 1em;\n    min-height: 1em;\n\n    contain: strict;\n    box-sizing: content-box !important;\n\n    --transition-speed: .2s;\n}\n\n:host([size=\"xxs\"]) { font-size: #{$icon-xxs} !important; }\n:host([size=\"xs\"]) { font-size: #{$icon-xs} !important; }\n:host([size=\"s\"]) { font-size: #{$icon-s} !important; }\n:host([size=\"m\"]) { font-size: #{$icon-m} !important; }\n:host([size=\"l\"]) { font-size: #{$icon-l} !important; }\n:host([size=\"xl\"]) { font-size: #{$icon-xl} !important; }\n\n.icon-inner,\nsvg {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-shrink: 0;\n\n    width: 100%;\n    min-width: 100%;\n\n    height: 100%;\n    min-height: 100%;\n}\n\nsvg {\n    transition: fill var(--transition-speed) ease-in-out;\n    fill: var(--color);\n}\n","import { Build, Component, Element, h, Host, Prop, State, Watch } from '@stencil/core';\nimport { LabelColor } from '../../interface';\nimport { IconSizes } from './icon.interface';\nimport { getSvgContent } from './request';\nimport { getName, getUrl } from './utils';\n\n@Component({\n    tag: 'true-icon',\n    assetsDirs: ['icons'],\n    styleUrl: 'icon.scss',\n    shadow: true\n})\nexport class Icon {\n    private io?: IntersectionObserver;\n\n    @Element() el!: HTMLElement;\n\n    @State() private svgContent?: string;\n    @State() private isVisible = false;\n\n    /**\n     * Specifies the label to use for accessibility. Defaults to the icon name.\n     */\n    @Prop({ mutable: true, reflect: true }) defaultLabel?: string;\n\n    /**\n     * Specifies which icon to use from the built-in set of icons.\n     */\n    @Prop({ reflect: true }) name?: string;\n\n    /**\n     * The size of the icon: xxs through xl\n     */\n    @Prop({ reflect: true }) size?: IconSizes;\n\n    @Prop() color: LabelColor;\n\n    /**\n     * If enabled, ion-icon will be loaded lazily when it's visible in the viewport.\n     * Default, `false`.\n     */\n    @Prop() lazy = false;\n\n    connectedCallback() {\n        // purposely do not return the promise here because loading\n        // the svg file should not hold up loading the app\n        // only load the svg if it's visible\n        this.waitUntilVisible(this.el, '50px', () => {\n            this.isVisible = true;\n            this.loadIcon();\n        });\n    }\n\n    disconnectedCallback() {\n        if (this.io) {\n            this.io.disconnect();\n            this.io = undefined;\n        }\n    }\n\n    private waitUntilVisible(el: HTMLElement, rootMargin: string, cb: () => void) {\n        if (Build.isBrowser && this.lazy && typeof window !== 'undefined' && (window as any).IntersectionObserver) {\n            const io = this.io = new (window as any).IntersectionObserver((data: IntersectionObserverEntry[]) => {\n                if (data[0].isIntersecting) {\n                    io.disconnect();\n                    this.io = undefined;\n                    cb();\n                }\n            }, { rootMargin });\n\n            io.observe(el);\n\n        } else {\n            // browser doesn't support IntersectionObserver\n            // so just fallback to always show it\n            cb();\n        }\n    }\n\n    @Watch('name')\n    loadIcon() {\n        if (Build.isBrowser && this.isVisible) {\n            const url = getUrl(this);\n            if (url) {\n                getSvgContent(url)\n                    .then(svgContent => this.svgContent = svgContent);\n            }\n        }\n\n        if (!this.defaultLabel) {\n            const label = getName(this.name);\n            // user did not provide a label\n            // come up with the label based on the icon name\n            if (label) {\n                this.defaultLabel = label\n                    .replace('ios-', '')\n                    .replace('md-', '')\n                    .replace(/\\-/g, ' ');\n            }\n        }\n    }\n\n    render() {\n        const style = {};\n        if (this.color) {\n            style['--color'] = `var(--color-${this.color})`;\n        }\n        return (\n            <Host role='img'\n            style={style}>{(\n                (Build.isBrowser && this.svgContent)\n                    ? <div class='icon-inner' innerHTML={this.svgContent}></div>\n                    : <div class='icon-inner'></div>\n            )}\n            </Host>\n        );\n    }\n}\n",":host {\r\n    display: block;\r\n    --color: var(--color-primary);\r\n\r\n    true-text-base {\r\n        --line-height: 20px;\r\n        --text-color: var(--color);\r\n    }\r\n}","import { Component, h, Prop } from '@stencil/core';\r\nimport { TextColor, TextWeight } from '../text-base/text-base.interface';\r\n\r\n@Component({\r\n  tag: 'true-subtext',\r\n  styleUrl: 'subtext.scss',\r\n  shadow: true,\r\n})\r\nexport class Subtext {\r\n  /**\r\n   * Passthrough prop for weight of the text\r\n   */\r\n  @Prop({ reflect: true }) weight: Extract<TextWeight, 'regular' | 'medium' | 'bold'> = 'regular';\r\n\r\n  /**\r\n   * Passthrough prop for the color of the text\r\n   */\r\n  @Prop({ reflect: true }) color: TextColor;\r\n\r\n  /**\r\n   * The maximum lines to display before truncating the text.\r\n   * Default behavior shows all lines of text with no truncation.\r\n   */\r\n  @Prop({ reflect: true }) maxLines: string;\r\n\r\n  render() {\r\n    return (\r\n      <true-text-base size=\"s\" weight={this.weight} maxLines={this.maxLines} color={this.color}>\r\n        <slot></slot>\r\n      </true-text-base>\r\n    );\r\n  }\r\n}\r\n"],"version":3}