{"version":3,"names":["loadingSpinnerCss","LoadingSpinner","this","sizeMap","s","m","l","xl","strokeSizeMap","radius","sizeNumber","strokeWidth","circumference","Math","PI","size","render","style","height","width","loaderColor","pathColor","h","Host","viewBox","class","cx","cy","r","fill"],"sources":["src/components/basic-app/loading-spinner/loading-spinner.scss?tag=true-loading-spinner&encapsulation=shadow","src/components/basic-app/loading-spinner/loading-spinner.tsx"],"sourcesContent":[":host {\n\n    --stroke-color: currentColor;\n    --path-color: none;\n    --path-opacity: 1;\n    --background-color: none;\n    --background-shadow: none;\n    \n    position: relative;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    &::before {\n        content: '';\n        position: absolute;\n        background-color: var(--background-color);\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        border-radius: 50%;\n        opacity: var(--background-opacity);\n        box-shadow: var(--background-shadow);\n    }\n\n    svg {\n        transform: rotate(-90deg);\n        padding: 5px;\n        animation: spin 3s infinite linear;\n    }\n\n    .background {\n        stroke: var(--path-color);\n    }\n\n    .loader {\n        stroke: var(--stroke-color);\n        animation: dash 2s infinite;\n    }\n\n    @keyframes spin {\n        from {\n            transform: rotate(-90deg);\n        }\n        to {\n            transform: rotate(269deg);\n        }\n    }\n\n    @keyframes dash {\n        from {\n            stroke-dashoffset: var(--positive-circumference);\n        }\n        to {\n            stroke-dashoffset: var(--negative-circumference);\n        }\n    }\n}","import { Component, h, Host, Prop } from '@stencil/core';\nimport { BackgroundColor, LabelColor } from '../../../interface';\nimport { LoadingSpinnerSizes } from './loading-spinner.interface';\n\n@Component({\n    tag: 'true-loading-spinner',\n    styleUrl: 'loading-spinner.scss',\n    shadow: true\n})\nexport class LoadingSpinner {\n\n    // Sizes are not yet defined. Matching current for the component\n    readonly sizeMap: {[key in LoadingSpinnerSizes]: number} = {\n        s: 14,\n        m: 16,\n        l: 18,\n        xl: 50\n    }\n\n    readonly strokeSizeMap: {[key in LoadingSpinnerSizes]: number} = {\n        s: 2,\n        m: 2,\n        l: 2,\n        xl: 4\n    }\n\n    @Prop({ reflect: true }) size: LoadingSpinnerSizes = 'm';\n\n    /**\n     * Color of the loader line\n     */\n    @Prop() loaderColor: LabelColor = 'custom-brand-accent';\n\n    /**\n     * Color of the track the loader follows\n     */\n    @Prop() pathColor: BackgroundColor = 'tertiary';\n\n    // calculate radius of svg\n    get radius() {\n        return (this.sizeNumber / 2) - (this.strokeWidth / 2);\n    }\n\n    // calculate circumference of circle\n    get circumference() {\n        return (2 * Math.PI * this.radius);\n    }\n\n    get sizeNumber() {\n        return this.sizeMap[this.size];\n    }\n\n    get strokeWidth() {\n        return this.strokeSizeMap[this.size];\n    }\n\n    render() {\n        // set host style\n        const style = {\n            height: `${this.size}px`,\n            width: `${this.size}px`,\n            '--positive-circumference': `${(this.circumference-1)}`,\n            '--negative-circumference': `${(-this.circumference+1)}`\n        }\n\n        if (this.loaderColor) {\n            style['--stroke-color'] = `var(--color-${this.loaderColor})`;\n        }\n\n        if (this.pathColor) {\n            style['--path-color'] = `var(--bg-color-${this.pathColor})`;\n        }\n        return (\n            <Host style={style}>\n                <svg\n                    width={this.sizeNumber}\n                    height={this.sizeNumber}\n                    viewBox={`0 0 ${this.sizeNumber} ${this.sizeNumber}`}>\n                    <circle\n                        class='background'\n                        cx={this.sizeNumber / 2}\n                        cy={this.sizeNumber / 2}\n                        r={this.radius}\n                        fill='none'\n                        stroke-width={this.strokeWidth}></circle>\n                    <circle\n                        class='loader'\n                        cx={this.sizeNumber / 2}\n                        cy={this.sizeNumber / 2}\n                        r={this.radius}\n                        fill='none'\n                        stroke-width={this.strokeWidth}\n                        stroke-dasharray={this.circumference}\n                        stroke-linecap='round'></circle>\n                </svg>\n            </Host>\n        )\n    }\n}\n"],"mappings":"kDAAA,MAAMA,EAAoB,gxB,MCSbC,EAAc,M,yBAGdC,KAAAC,QAAkD,CACvDC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,GAAI,IAGCL,KAAAM,cAAwD,CAC7DJ,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,GAAI,G,UAG6C,I,iBAKnB,sB,eAKG,U,CAGrC,UAAIE,GACA,OAAQP,KAAKQ,WAAa,EAAMR,KAAKS,YAAc,C,CAIvD,iBAAIC,GACA,OAAQ,EAAIC,KAAKC,GAAKZ,KAAKO,M,CAG/B,cAAIC,GACA,OAAOR,KAAKC,QAAQD,KAAKa,K,CAG7B,eAAIJ,GACA,OAAOT,KAAKM,cAAcN,KAAKa,K,CAGnC,MAAAC,GAEI,MAAMC,EAAQ,CACVC,OAAQ,GAAGhB,KAAKa,SAChBI,MAAO,GAAGjB,KAAKa,SACf,2BAA4B,GAAIb,KAAKU,cAAc,IACnD,2BAA4B,IAAKV,KAAKU,cAAc,KAGxD,GAAIV,KAAKkB,YAAa,CAClBH,EAAM,kBAAoB,eAAef,KAAKkB,c,CAGlD,GAAIlB,KAAKmB,UAAW,CAChBJ,EAAM,gBAAkB,kBAAkBf,KAAKmB,Y,CAEnD,OACIC,EAACC,EAAI,CAACN,MAAOA,GACTK,EAAA,OACIH,MAAOjB,KAAKQ,WACZQ,OAAQhB,KAAKQ,WACbc,QAAS,OAAOtB,KAAKQ,cAAcR,KAAKQ,cACxCY,EAAA,UACIG,MAAM,aACNC,GAAIxB,KAAKQ,WAAa,EACtBiB,GAAIzB,KAAKQ,WAAa,EACtBkB,EAAG1B,KAAKO,OACRoB,KAAK,OAAM,eACG3B,KAAKS,cACvBW,EAAA,UACIG,MAAM,SACNC,GAAIxB,KAAKQ,WAAa,EACtBiB,GAAIzB,KAAKQ,WAAa,EACtBkB,EAAG1B,KAAKO,OACRoB,KAAK,OAAM,eACG3B,KAAKS,YAAW,mBACZT,KAAKU,cAAa,iBACrB,W"}